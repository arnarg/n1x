{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"n1x","text":"<p>Configure your Kubernetes cluster like it's NixOS.</p> <p>Warning</p> <p>Under active development. Things will change.</p>"},{"location":"#why","title":"Why?","text":"<p>It's desirable to manage Kubernetes clusters in a declarative way using a git repository as a source of truth for manifests that should be deployed into the cluster. One popular solution that is often used to achieve this goal is Argo CD.</p>"},{"location":"#argo-cd","title":"Argo CD","text":"<p>Argo CD has a concept of applications. Each application has an entrypoint somewhere in your git repository that is either a Helm chart, kustomize application, jsonnet files or just a directory of YAML files. All the resources that are output when templating the helm chart, kustomizing the kustomize application or are defined in the YAML files in the directory, make up the application and are (usually) deployed into a single namespace.</p> <p>For these reasons these git repositories often need quite elaborate designs once many applications should be deployed, requiring use of application sets (generator for applications) or custom Helm charts just to render all the different applications of the repository.</p>"},{"location":"#nixos","title":"NixOS","text":"<p>When looking at the module system of NixOS, an application in Argo CD might be comparable to a single systemd service in NixOS (declared with option <code>systemd.services.&lt;name&gt;</code>: docs).</p> <p>But users of NixOS aren't creating systemd services manually unless they're creating their own manual modules. Instead available pre-configured services are abstacted away into options such as <code>services.postgresql</code> or <code>programs.git</code> (this one doesn't create a systemd service but adds git to the system path and writes some configs).</p>"},{"location":"#n1x_1","title":"n1x","text":"<p>The idea of n1x is then to answer the question: What if we could configure our entire GitOps repository for Argo CD using a NixOS-like module system that abstracts away the creation of applications behind (hopefully) friendlier options with a (hopefully) community driven repository of applications.</p> <p>As a bonus of all the applications being defined in a single (modular) configuration, n1x can automatically generate an App of Apps removing the need to manually discover all the different applications that Argo CD should manage.</p>"},{"location":"#example-configuration","title":"Example Configuration","text":"<pre><code>{config, ...}: let\n  domain = \"mydomain.com\";\nin {\n  # Enable Cilium CNI application\n  networking.cni = \"cilium\";\n\n  # Configure Cilium to use the default k3s pod cidr\n  networking.cilium.podCidrs = [\"10.42.0.0/16\"];\n\n  # Enable traefik as ingress controller\n  services.traefik.enable = true;\n\n  # Enable Argo CD\n  services.argocd.enable = true;\n\n  # Create an Ingress for Argo CD web UI\n  services.argocd.ingress = {\n    enable = true;\n    hosts = [\"argocd.${domain}\"];\n\n    # Reference an option from another service's option\n    ingressClass = config.services.traefik.ingressClass.name;\n  };\n}\n</code></pre>"},{"location":"#non-goals","title":"Non Goals","text":""},{"location":"#typed-resource-definitions","title":"Typed Resource Definitions","text":"<p>n1x does not concern itself with defining typed options for every possible Kubernetes resource like is done with kubenix. This approach requires automatic generation from JSON schemas of all supported resources, and needs to be updated for every new release of Kubernetes.</p> <p>That also means that it will explicitly need to support every different CRD from applications it wants to deploy.</p> <p>Instead it allows for outputing any structure as long as it's under <code>&lt;apiVersion&gt;.&lt;kind&gt;.&lt;name&gt;</code> and let Argo CD surface the error if the data is not a valid resource.</p>"},{"location":"#define-resources-for-all-applications","title":"Define Resources for all Applications","text":"<p>I do not want to define the required resources to deploy an application that I need to then maintain down the line if an official Helm chart or kustomize application already exists.</p> <p>Instead we should use those Helm charts or kustomize applications as a base to work on top of.</p> <p>Example:</p> <pre><code>{\n  lib,\n  config,\n  ...\n}: let\n  cfg = config.services.argocd;\n\n  # Downloads a helm chart and creation a derivation with the\n  # chart data (this function comes from nix-kube-generators,\n  # see special thanks on the bottom of this page).\n  chart = lib.kube.downloadHelmChart {\n    repo = \"https://argoproj.github.io/argo-helm/\";\n    chart = \"argo-cd\";\n    version = \"5.51.4\";\n    chartHash = \"sha256-e2aREkDbLtD1bC/dAEHPeqnmHLG+Ch3RTMxQSWPP5PY=\";\n  };\nin {\n  options.services.argocd = with lib; {\n    # Allow the user a simple enable flag to add the Argo CD\n    # application to the cluster.\n    enable = mkEnableOption \"argocd\";\n    namespace = mkOption {\n      type = types.str;\n      default = \"argocd\";\n      description = \"Destination namespace for ArgoCD.\";\n    };\n    # Expose useful configuration options that can be set\n    # without knowing the syntax of the underlying Helm\n    # value file.\n    ingress = {\n      enable = mkOption {\n        type = types.bool;\n        default = false;\n        description = \"Create an ingress for argocd-server.\";\n      };\n      host = mkOption {\n        type = types.nullOr types.str;\n        default = null;\n        description = \"Hostname to put in the argocd-server ingress.\";\n      };\n      ingressClass = mkOption {\n        type = types.nullOr types.str;\n        default = null;\n        description = \"Ingress class to set on the ingress for argocd-server.\";\n      };\n    };\n    # But also allow passing the underlying Helm values\n    # so the user isn't limited if they need to set custom\n    # options.\n    values = mkOption {\n      type = types.attrsOf types.anything;\n      default = {};\n      description = \"Values to pass on to the argo-cd helm chart.\";\n    };\n  };\n\n  config = lib.mkIf cfg.enable {\n    applications.argocd = {\n      description = \"Argo CD is a declarative, GitOps continuous delivery tool for Kubernetes.\";\n      namespace = cfg.namespace;\n      resources = lib.mkMerge [\n        # Render and parse the resources from a Helm chart.\n        lib.kube.renderHelmChart {\n          name = \"argocd\";\n          namespace = cfg.namespace;\n          chart = chart;\n          values = {\n            # Set custom values set with n1x options.\n            server.ingress.enabled = cfg.ingress.enable;\n            server.ingress.hosts = lib.optional\n              (!builtins.isNull cfg.ingress.host) cfg.ingress.host;\n          }\n          # But also merge values set with n1x option.\n          // cfg.values;\n        }\n        (lib.mkIf (!builtins.isNull cfg.ingress.ingressClass) {\n          \"networking.k8s.io/v1\".Ingress.argocd-server-ingress = {\n            # Merge the resources with custom options that may not\n            # be possible to set with the Helm chart's values.\n            spec.ingressClassName = cfg.ingress.ingressClass;\n          };\n        })\n      ];\n    };\n  };\n}\n</code></pre> <p>Then the user of n1x only needs to set a few options:</p> <pre><code>{config, ...}: {\n  services.argocd = {\n    enable = true;\n    ingress = {\n      enable = true;\n      host = \"argocd.mydomain.com\";\n      # Reference options across applications.\n      ingressClass = config.services.traefik.ingressClassName;\n    };\n  };\n}\n</code></pre>"},{"location":"#special-thanks","title":"Special Thanks","text":"<p>farcaller/nix-kube-generators is used internally to pull and render Helm charts and the library is re-exposed under <code>lib.kube</code> in the modules.</p>"},{"location":"options/","title":"Configuration Options","text":""},{"location":"options/#applications","title":"applications","text":"<p>An application describes a single Argo CD application that can be rendered using n1x.</p> <p>Usually the application is abstracted away behind a <code>services</code> option.</p> <p>It is used to render Kubernetes resources when running <code>n1x render</code> and appears in the list of applications when running <code>n1x list</code>.</p> <p>Type: attribute set of (submodule)</p> <p>Default: <code>{ }</code></p> <p>Example:</p> <pre><code>{\n  argocd = {\n    description = \"Argo CD is a declarative, GitOps continuous delivery tool for Kubernetes.\";\n    namespace = \"argocd\";\n    resources = {\n      v1 = {\n        Namespace = {\n          argocd = { };\n        };\n      };\n    };\n  };\n}\n</code></pre> <p>Declared by:</p> <ul> <li>&lt;n1x/modules/applications.nix&gt;</li> </ul>"},{"location":"options/#applicationsnamedescription","title":"applications.&lt;name&gt;.description","text":"<p>Description for the application.</p> <p>Type: string</p> <p>Default: <code>\"\"</code></p> <p>Declared by:</p> <ul> <li>&lt;n1x/modules/applications.nix&gt;</li> </ul>"},{"location":"options/#applicationsnameenable","title":"applications.&lt;name&gt;.enable","text":"<p>Whether the application is enabled.</p> <p>Type: boolean</p> <p>Default: <code>true</code></p> <p>Declared by:</p> <ul> <li>&lt;n1x/modules/applications.nix&gt;</li> </ul>"},{"location":"options/#applicationsnameinappofapps","title":"applications.&lt;name&gt;.inAppOfApps","text":"<p>Whether application should be a part of the app-of-apps application.</p> <p>Type: boolean</p> <p>Default: <code>true</code></p> <p>Declared by:</p> <ul> <li>&lt;n1x/modules/applications.nix&gt;</li> </ul>"},{"location":"options/#applicationsnameinbootstrap","title":"applications.&lt;name&gt;.inBootstrap","text":"<p>Whether application should be a part of the bootstrap application.</p> <p>Type: boolean</p> <p>Default: <code>false</code></p> <p>Declared by:</p> <ul> <li>&lt;n1x/modules/applications.nix&gt;</li> </ul>"},{"location":"options/#applicationsnamename","title":"applications.&lt;name&gt;.name","text":"<p>Name of the application.</p> <p>Type: string</p> <p>Default: <code>\"\u2039name\u203a\"</code></p> <p>Declared by:</p> <ul> <li>&lt;n1x/modules/applications.nix&gt;</li> </ul>"},{"location":"options/#applicationsnamenamespace","title":"applications.&lt;name&gt;.namespace","text":"<p>Namespace to deploy application into (defaults to name).</p> <p>Type: string</p> <p>Default: <code>\"\u2039name\u203a\"</code></p> <p>Declared by:</p> <ul> <li>&lt;n1x/modules/applications.nix&gt;</li> </ul>"},{"location":"options/#applicationsnameproject","title":"applications.&lt;name&gt;.project","text":"<p>ArgoCD project to make application a part of.</p> <p>Type: string</p> <p>Default: <code>\"default\"</code></p> <p>Declared by:</p> <ul> <li>&lt;n1x/modules/applications.nix&gt;</li> </ul>"},{"location":"options/#applicationsnameresources","title":"applications.&lt;name&gt;.resources","text":"<p>Resources that make up the application.</p> <p>They should be declared in the form <code>&lt;apiVersion&gt;.&lt;kind&gt;.&lt;name&gt;</code>.</p> <p>For example the following namespace resource:</p> <pre><code>apiVersion: v1\nkind: Namespace\nmetadata:\nname: argocd\n</code></pre> <p>Would be declared in like this:</p> <pre><code>{\n  v1.Namespace.argocd = {\n    # This is redundant as `metadata.name` defaults\n    # to the name of the attribute for the resource.\n    metadata.name = \"argocd\";\n  };\n}\n</code></pre> <p>Type: attribute set of attribute set of attribute set of anything</p> <p>Default: <code>{ }</code></p> <p>Example:</p> <pre><code>{\n  v1 = {\n    ConfigMap = {\n      argocd-cmd-params-cm = {\n        data = {\n          \"server.insecure\" = \"true\";\n        };\n        metadata = {\n          namespace = \"argocd\";\n        };\n      };\n    };\n    Namespace = {\n      argocd = { };\n    };\n  };\n}\n</code></pre> <p>Declared by:</p> <ul> <li>&lt;n1x/modules/applications.nix&gt;</li> </ul>"},{"location":"options/#applicationsnamesyncpolicyautomatedprune","title":"applications.&lt;name&gt;.syncPolicy.automated.prune","text":"<p>Specifies if resources should be pruned during auto-syncing.</p> <p>Type: boolean</p> <p>Default: <code>false</code></p> <p>Declared by:</p> <ul> <li>&lt;n1x/modules/applications.nix&gt;</li> </ul>"},{"location":"options/#applicationsnamesyncpolicyautomatedselfheal","title":"applications.&lt;name&gt;.syncPolicy.automated.selfHeal","text":"<p>Specifies if partial app sync should be executed when resources are changed only in target Kubernetes cluster and no git change detected.</p> <p>Type: boolean</p> <p>Default: <code>false</code></p> <p>Declared by:</p> <ul> <li>&lt;n1x/modules/applications.nix&gt;</li> </ul>"},{"location":"options/#n1xappofappsenable","title":"n1x.appOfApps.enable","text":"<p>Whether to enable the app-of-apps application.</p> <p>Type: boolean</p> <p>Default: <code>false</code></p> <p>Declared by:</p> <ul> <li>&lt;n1x/modules/n1x.nix&gt;</li> </ul>"},{"location":"options/#n1xappofappsname","title":"n1x.appOfApps.name","text":"<p>Name of the app-of-apps applications.</p> <p>Type: string</p> <p>Default: <code>\"apps\"</code></p> <p>Declared by:</p> <ul> <li>&lt;n1x/modules/n1x.nix&gt;</li> </ul>"},{"location":"options/#n1xappofappsrepository","title":"n1x.appOfApps.repository","text":"<p>The source repository url to put on all generated Argo CD Applications.</p> <p>Type: string</p> <p>Declared by:</p> <ul> <li>&lt;n1x/modules/n1x.nix&gt;</li> </ul>"},{"location":"options/#n1xappofappsrevision","title":"n1x.appOfApps.revision","text":"<p>The target revision to put on all generated Argo CD Applications.</p> <p>Type: string</p> <p>Default: <code>\"HEAD\"</code></p> <p>Declared by:</p> <ul> <li>&lt;n1x/modules/n1x.nix&gt;</li> </ul>"},{"location":"options/#n1xappofappssyncpolicyautomatedprune","title":"n1x.appOfApps.syncPolicy.automated.prune","text":"<p>Specifies if resources should be pruned during auto-syncing.</p> <p>Type: boolean</p> <p>Default: <code>false</code></p> <p>Declared by:</p> <ul> <li>&lt;n1x/modules/n1x.nix&gt;</li> </ul>"},{"location":"options/#n1xappofappssyncpolicyautomatedselfheal","title":"n1x.appOfApps.syncPolicy.automated.selfHeal","text":"<p>Specifies if partial app sync should be executed when resources are changed only in target Kubernetes cluster and no git change detected.</p> <p>Type: boolean</p> <p>Default: <code>false</code></p> <p>Declared by:</p> <ul> <li>&lt;n1x/modules/n1x.nix&gt;</li> </ul>"},{"location":"options/#n1xbootstrapenable","title":"n1x.bootstrap.enable","text":"<p>Whether to enable the bootstrap application.</p> <p>Type: boolean</p> <p>Default: <code>false</code></p> <p>Declared by:</p> <ul> <li>&lt;n1x/modules/n1x.nix&gt;</li> </ul>"},{"location":"options/#n1xdefaultsyncpolicyautomatedprune","title":"n1x.defaultSyncPolicy.automated.prune","text":"<p>Specifies if resources should be pruned during auto-syncing. This is the default value for all applications if not explicitly set.</p> <p>Type: boolean</p> <p>Default: <code>false</code></p> <p>Declared by:</p> <ul> <li>&lt;n1x/modules/n1x.nix&gt;</li> </ul>"},{"location":"options/#n1xdefaultsyncpolicyautomatedselfheal","title":"n1x.defaultSyncPolicy.automated.selfHeal","text":"<p>Specifies if partial app sync should be executed when resources are changed only in target Kubernetes cluster and no git change detected. This is the default value for all applications if not explicitly set.</p> <p>Type: boolean</p> <p>Default: <code>false</code></p> <p>Declared by:</p> <ul> <li>&lt;n1x/modules/n1x.nix&gt;</li> </ul>"},{"location":"options/#networkingciliumenableipv4","title":"networking.cilium.enableIpv4","text":"<p>Enable IPv4 support in cilium.</p> <p>Type: boolean</p> <p>Default: <code>true</code></p> <p>Declared by:</p> <ul> <li>&lt;n1x/modules/networking/cilium.nix&gt;</li> </ul>"},{"location":"options/#networkingciliumenableipv6","title":"networking.cilium.enableIpv6","text":"<p>Enable IPv6 support in cilium.</p> <p>Type: boolean</p> <p>Default: <code>false</code></p> <p>Declared by:</p> <ul> <li>&lt;n1x/modules/networking/cilium.nix&gt;</li> </ul>"},{"location":"options/#networkingciliumextrayamls","title":"networking.cilium.extraYAMLs","text":"<p>Extra resources defined in YAML that will be parsed and merged with the rest of the resources.</p> <p>Type: list of strings concatenated with \"\\n\"</p> <p>Default: <code>[ ]</code></p> <p>Example:</p> <pre><code>[\n  ''\n    apiVersion: v1\n    kind: Namespace\n    metadata:\n      name: kube-system\n''\n''\n    apiVersion: v1\n    kind: ConfigMap\n    metadata:\n      name: my-config\n      namespace: kube-system\n    ---\n    apiVersion: v1\n    kind: ConfigMap\n    metadata:\n      name: my-files\n      namespace: kube-system\n    data:\n      file.txt: |\n        some data here.\n''\n]\n</code></pre> <p>Declared by:</p> <ul> <li>&lt;n1x/modules/networking/cilium.nix&gt;</li> </ul>"},{"location":"options/#networkingciliumipammode","title":"networking.cilium.ipamMode","text":"<p>IP Address Management mode for cilium to use.</p> <p>Type: one of \"cluster-pool\", \"kubernetes\", \"eni\"</p> <p>Default: <code>\"cluster-pool\"</code></p> <p>Declared by:</p> <ul> <li>&lt;n1x/modules/networking/cilium.nix&gt;</li> </ul>"},{"location":"options/#networkingciliumname","title":"networking.cilium.name","text":"<p>Name of the application for cilium.</p> <p>Type: string</p> <p>Default: <code>\"cilium\"</code></p> <p>Declared by:</p> <ul> <li>&lt;n1x/modules/networking/cilium.nix&gt;</li> </ul>"},{"location":"options/#networkingciliumnamespace","title":"networking.cilium.namespace","text":"<p>Destination namespace for cilium.</p> <p>Type: string</p> <p>Default: <code>\"kube-system\"</code></p> <p>Declared by:</p> <ul> <li>&lt;n1x/modules/networking/cilium.nix&gt;</li> </ul>"},{"location":"options/#networkingciliumpodcidrs","title":"networking.cilium.podCidrs","text":"<p>IPv4 CIDR list range to delegate to individual nodes for IPAM.</p> <p>Type: list of string</p> <p>Default: <code>[\"10.0.0.0/8\"]</code></p> <p>Declared by:</p> <ul> <li>&lt;n1x/modules/networking/cilium.nix&gt;</li> </ul>"},{"location":"options/#networkingciliumpodcidrsv6","title":"networking.cilium.podCidrsv6","text":"<p>IPv6 CIDR mask size to delegate to individual nodes for IPAM.</p> <p>Type: list of string</p> <p>Default: <code>[\"fd00::/104\"]</code></p> <p>Declared by:</p> <ul> <li>&lt;n1x/modules/networking/cilium.nix&gt;</li> </ul>"},{"location":"options/#networkingciliumpolicyauditmode","title":"networking.cilium.policyAuditMode","text":"<p>Enable policy audit mode in cilium.</p> <p>Type: boolean</p> <p>Default: <code>false</code></p> <p>Declared by:</p> <ul> <li>&lt;n1x/modules/networking/cilium.nix&gt;</li> </ul>"},{"location":"options/#networkingciliumpolicyenforcementmode","title":"networking.cilium.policyEnforcementMode","text":"<p>Policy enforcement mode for cilium to use.</p> <p>See: https://docs.cilium.io/en/latest/security/policy/intro/#policy-enforcement-modes</p> <p>Type: one of \"default\", \"always\", \"never\"</p> <p>Default: <code>\"default\"</code></p> <p>Declared by:</p> <ul> <li>&lt;n1x/modules/networking/cilium.nix&gt;</li> </ul>"},{"location":"options/#networkingciliumvalues","title":"networking.cilium.values","text":"<p>Values to pass on to the cilium helm chart.</p> <p>Type: attribute set of anything</p> <p>Default: <code>{ }</code></p> <p>Declared by:</p> <ul> <li>&lt;n1x/modules/networking/cilium.nix&gt;</li> </ul>"},{"location":"options/#networkingcni","title":"networking.cni","text":"<p>Which CNI application to enable or none if <code>null</code>.</p> <p>Type: null or one of \"cilium\", \"flannel\"</p> <p>Default: <code>null</code></p> <p>Declared by:</p> <ul> <li>&lt;n1x/modules/networking&gt;</li> </ul>"},{"location":"options/#networkingflannelbackend","title":"networking.flannel.backend","text":"<p>Backend for kube-flannel.</p> <p>See: https://github.com/flannel-io/flannel/blob/master/Documentation/backends.md</p> <p>Type: one of \"vxlan\", \"host-gw\", \"wireguard\", \"udp\"</p> <p>Default: <code>\"vxlan\"</code></p> <p>Declared by:</p> <ul> <li>&lt;n1x/modules/networking/flannel.nix&gt;</li> </ul>"},{"location":"options/#networkingflannelbackendport","title":"networking.flannel.backendPort","text":"<p>Port used by the backend. 0 means default value (VXLAN: 8472, Wireguard: 51821, UDP: 8285).</p> <p>Type: 16 bit unsigned integer; between 0 and 65535 (both inclusive)</p> <p>Default: <code>0</code></p> <p>Declared by:</p> <ul> <li>&lt;n1x/modules/networking/flannel.nix&gt;</li> </ul>"},{"location":"options/#networkingflannelextrayamls","title":"networking.flannel.extraYAMLs","text":"<p>Extra resources defined in YAML that will be parsed and merged with the rest of the resources.</p> <p>Type: list of strings concatenated with \"\\n\"</p> <p>Default: <code>[ ]</code></p> <p>Example:</p> <pre><code>[\n  ''\n    apiVersion: v1\n    kind: Namespace\n    metadata:\n      name: kube-flannel\n''\n''\n    apiVersion: v1\n    kind: ConfigMap\n    metadata:\n      name: my-config\n      namespace: kube-flannel\n    ---\n    apiVersion: v1\n    kind: ConfigMap\n    metadata:\n      name: my-files\n      namespace: kube-flannel\n    data:\n      file.txt: |\n        some data here.\n''\n]\n</code></pre> <p>Declared by:</p> <ul> <li>&lt;n1x/modules/networking/flannel.nix&gt;</li> </ul>"},{"location":"options/#networkingflannelname","title":"networking.flannel.name","text":"<p>Name of the application for flannel.</p> <p>Type: string</p> <p>Default: <code>\"flannel\"</code></p> <p>Declared by:</p> <ul> <li>&lt;n1x/modules/networking/flannel.nix&gt;</li> </ul>"},{"location":"options/#networkingflannelnamespace","title":"networking.flannel.namespace","text":"<p>Destination namespace for flannel.</p> <p>Type: string</p> <p>Default: <code>\"kube-flannel\"</code></p> <p>Declared by:</p> <ul> <li>&lt;n1x/modules/networking/flannel.nix&gt;</li> </ul>"},{"location":"options/#networkingflannelpodcidr","title":"networking.flannel.podCidr","text":"<p>IPv4 CIDR to delegate to pods.</p> <p>Type: string</p> <p>Default: <code>\"10.244.0.0/16\"</code></p> <p>Declared by:</p> <ul> <li>&lt;n1x/modules/networking/flannel.nix&gt;</li> </ul>"},{"location":"options/#networkingflannelpodcidrv6","title":"networking.flannel.podCidrv6","text":"<p>IPv6 CIDR to delete got pods.</p> <p>Type: string</p> <p>Default: <code>\"\"</code></p> <p>Declared by:</p> <ul> <li>&lt;n1x/modules/networking/flannel.nix&gt;</li> </ul>"},{"location":"options/#networkingflannelvalues","title":"networking.flannel.values","text":"<p>Values to pass on to the flannel helm chart.</p> <p>Type: attribute set of anything</p> <p>Default: <code>{ }</code></p> <p>Declared by:</p> <ul> <li>&lt;n1x/modules/networking/flannel.nix&gt;</li> </ul>"},{"location":"options/#servicesargocdenable","title":"services.argocd.enable","text":"<p>Whether to enable argocd.</p> <p>Type: boolean</p> <p>Default: <code>false</code></p> <p>Example: <code>true</code></p> <p>Declared by:</p> <ul> <li>&lt;n1x/modules/services/argocd.nix&gt;</li> </ul>"},{"location":"options/#servicesargocdextrayamls","title":"services.argocd.extraYAMLs","text":"<p>Extra resources defined in YAML that will be parsed and merged with the rest of the resources.</p> <p>Type: list of strings concatenated with \"\\n\"</p> <p>Default: <code>[ ]</code></p> <p>Example:</p> <pre><code>[\n  ''\n    apiVersion: v1\n    kind: Namespace\n    metadata:\n      name: argocd\n''\n''\n    apiVersion: v1\n    kind: ConfigMap\n    metadata:\n      name: my-config\n      namespace: argocd\n    ---\n    apiVersion: v1\n    kind: ConfigMap\n    metadata:\n      name: my-files\n      namespace: argocd\n    data:\n      file.txt: |\n        some data here.\n''\n]\n</code></pre> <p>Declared by:</p> <ul> <li>&lt;n1x/modules/services/argocd.nix&gt;</li> </ul>"},{"location":"options/#servicesargocdingressenable","title":"services.argocd.ingress.enable","text":"<p>Create an ingress for argocd-server.</p> <p>Type: boolean</p> <p>Default: <code>false</code></p> <p>Declared by:</p> <ul> <li>&lt;n1x/modules/services/argocd.nix&gt;</li> </ul>"},{"location":"options/#servicesargocdingresshosts","title":"services.argocd.ingress.hosts","text":"<p>Hostnames to put in the argocd-server ingress.</p> <p>Type: list of string</p> <p>Default: <code>[ ]</code></p> <p>Declared by:</p> <ul> <li>&lt;n1x/modules/services/argocd.nix&gt;</li> </ul>"},{"location":"options/#servicesargocdingressingressclass","title":"services.argocd.ingress.ingressClass","text":"<p>Ingress class to set on the ingress for argocd-server.</p> <p>Type: string</p> <p>Default: <code>\"\"</code></p> <p>Declared by:</p> <ul> <li>&lt;n1x/modules/services/argocd.nix&gt;</li> </ul>"},{"location":"options/#servicesargocdn1xpluginenable","title":"services.argocd.n1xPlugin.enable","text":"<p>Whether to automatically add the n1x config management plugin to Argo CD.</p> <p>Type: boolean</p> <p>Default: <code>true</code></p> <p>Declared by:</p> <ul> <li>&lt;n1x/modules/services/argocd.nix&gt;</li> </ul>"},{"location":"options/#servicesargocdn1xpluginimage","title":"services.argocd.n1xPlugin.image","text":"<p>The image to use in the Argo CD config management plugin sidecar.</p> <p>Type: string</p> <p>Default: <code>\"ghcr.io/arnarg/n1x/argocd-cmp-plugin:latest\"</code></p> <p>Declared by:</p> <ul> <li>&lt;n1x/modules/services/argocd.nix&gt;</li> </ul>"},{"location":"options/#servicesargocdname","title":"services.argocd.name","text":"<p>Name of the application for argocd.</p> <p>Type: string</p> <p>Default: <code>\"argocd\"</code></p> <p>Declared by:</p> <ul> <li>&lt;n1x/modules/services/argocd.nix&gt;</li> </ul>"},{"location":"options/#servicesargocdnamespace","title":"services.argocd.namespace","text":"<p>Destination namespace for argocd.</p> <p>Type: string</p> <p>Default: <code>\"argocd\"</code></p> <p>Declared by:</p> <ul> <li>&lt;n1x/modules/services/argocd.nix&gt;</li> </ul>"},{"location":"options/#servicesargocdvalues","title":"services.argocd.values","text":"<p>Values to pass on to the argo-cd helm chart.</p> <p>Type: attribute set of anything</p> <p>Default: <code>{ }</code></p> <p>Declared by:</p> <ul> <li>&lt;n1x/modules/services/argocd.nix&gt;</li> </ul>"},{"location":"options/#servicescloudflare-operatorenable","title":"services.cloudflare-operator.enable","text":"<p>Whether to enable cloudflare-operator.</p> <p>Type: boolean</p> <p>Default: <code>false</code></p> <p>Example: <code>true</code></p> <p>Declared by:</p> <ul> <li>&lt;n1x/modules/services/cloudflare-operator.nix&gt;</li> </ul>"},{"location":"options/#servicescloudflare-operatorextrayamls","title":"services.cloudflare-operator.extraYAMLs","text":"<p>Extra resources defined in YAML that will be parsed and merged with the rest of the resources.</p> <p>Type: list of strings concatenated with \"\\n\"</p> <p>Default: <code>[ ]</code></p> <p>Example:</p> <pre><code>[\n  ''\n    apiVersion: v1\n    kind: Namespace\n    metadata:\n      name: cloudflare-operator\n''\n''\n    apiVersion: v1\n    kind: ConfigMap\n    metadata:\n      name: my-config\n      namespace: cloudflare-operator\n    ---\n    apiVersion: v1\n    kind: ConfigMap\n    metadata:\n      name: my-files\n      namespace: cloudflare-operator\n    data:\n      file.txt: |\n        some data here.\n''\n]\n</code></pre> <p>Declared by:</p> <ul> <li>&lt;n1x/modules/services/cloudflare-operator.nix&gt;</li> </ul>"},{"location":"options/#servicescloudflare-operatorname","title":"services.cloudflare-operator.name","text":"<p>Name of the application for cloudflare-operator.</p> <p>Type: string</p> <p>Default: <code>\"cloudflare-operator\"</code></p> <p>Declared by:</p> <ul> <li>&lt;n1x/modules/services/cloudflare-operator.nix&gt;</li> </ul>"},{"location":"options/#servicescloudflare-operatornamespace","title":"services.cloudflare-operator.namespace","text":"<p>Destination namespace for cloudflare-operator.</p> <p>Type: string</p> <p>Default: <code>\"cloudflare-operator\"</code></p> <p>Declared by:</p> <ul> <li>&lt;n1x/modules/services/cloudflare-operator.nix&gt;</li> </ul>"},{"location":"options/#servicesk8s-gatewaydomain","title":"services.k8s-gateway.domain","text":"<p>Delegated domain for k8s_gateway to use.</p> <p>Type: string</p> <p>Declared by:</p> <ul> <li>&lt;n1x/modules/services/k8s-gateway.nix&gt;</li> </ul>"},{"location":"options/#servicesk8s-gatewayenable","title":"services.k8s-gateway.enable","text":"<p>Whether to enable k8s-gateway.</p> <p>Type: boolean</p> <p>Default: <code>false</code></p> <p>Example: <code>true</code></p> <p>Declared by:</p> <ul> <li>&lt;n1x/modules/services/k8s-gateway.nix&gt;</li> </ul>"},{"location":"options/#servicesk8s-gatewayextrayamls","title":"services.k8s-gateway.extraYAMLs","text":"<p>Extra resources defined in YAML that will be parsed and merged with the rest of the resources.</p> <p>Type: list of strings concatenated with \"\\n\"</p> <p>Default: <code>[ ]</code></p> <p>Example:</p> <pre><code>[\n  ''\n    apiVersion: v1\n    kind: Namespace\n    metadata:\n      name: k8s-gateway\n''\n''\n    apiVersion: v1\n    kind: ConfigMap\n    metadata:\n      name: my-config\n      namespace: k8s-gateway\n    ---\n    apiVersion: v1\n    kind: ConfigMap\n    metadata:\n      name: my-files\n      namespace: k8s-gateway\n    data:\n      file.txt: |\n        some data here.\n''\n]\n</code></pre> <p>Declared by:</p> <ul> <li>&lt;n1x/modules/services/k8s-gateway.nix&gt;</li> </ul>"},{"location":"options/#servicesk8s-gatewayname","title":"services.k8s-gateway.name","text":"<p>Name of the application for k8s-gateway.</p> <p>Type: string</p> <p>Default: <code>\"k8s-gateway\"</code></p> <p>Declared by:</p> <ul> <li>&lt;n1x/modules/services/k8s-gateway.nix&gt;</li> </ul>"},{"location":"options/#servicesk8s-gatewaynamespace","title":"services.k8s-gateway.namespace","text":"<p>Destination namespace for k8s-gateway.</p> <p>Type: string</p> <p>Default: <code>\"k8s-gateway\"</code></p> <p>Declared by:</p> <ul> <li>&lt;n1x/modules/services/k8s-gateway.nix&gt;</li> </ul>"},{"location":"options/#servicesk8s-gatewayvalues","title":"services.k8s-gateway.values","text":"<p>Values to pass on to the k8s-gateway helm chart.</p> <p>Type: attribute set of anything</p> <p>Default: <code>{ }</code></p> <p>Declared by:</p> <ul> <li>&lt;n1x/modules/services/k8s-gateway.nix&gt;</li> </ul>"},{"location":"options/#servicessops-secrets-operatoragekeysecret","title":"services.sops-secrets-operator.ageKeySecret","text":"<p>Name of a secret containing an age private key to use to decrypt SOPS secrets. Secret needs to contain a <code>keys.txt</code> data key.</p> <p>Example: <pre><code>apiVersion: v1\nkind: Secret\nmetadata:\nname: age-keys\nnamespace: sops-secrets-operator\nstringData:\nkeys.txt: |\nAGE-SECRET-KEY-123...\n</code></pre></p> <p>Type: null or string</p> <p>Default: <code>null</code></p> <p>Declared by:</p> <ul> <li>&lt;n1x/modules/services/sops-secrets-operator.nix&gt;</li> </ul>"},{"location":"options/#servicessops-secrets-operatorenable","title":"services.sops-secrets-operator.enable","text":"<p>Whether to enable sops-secrets-operator.</p> <p>Type: boolean</p> <p>Default: <code>false</code></p> <p>Example: <code>true</code></p> <p>Declared by:</p> <ul> <li>&lt;n1x/modules/services/sops-secrets-operator.nix&gt;</li> </ul>"},{"location":"options/#servicessops-secrets-operatorextrayamls","title":"services.sops-secrets-operator.extraYAMLs","text":"<p>Extra resources defined in YAML that will be parsed and merged with the rest of the resources.</p> <p>Type: list of strings concatenated with \"\\n\"</p> <p>Default: <code>[ ]</code></p> <p>Example:</p> <pre><code>[\n  ''\n    apiVersion: v1\n    kind: Namespace\n    metadata:\n      name: sops-secrets-operator\n''\n''\n    apiVersion: v1\n    kind: ConfigMap\n    metadata:\n      name: my-config\n      namespace: sops-secrets-operator\n    ---\n    apiVersion: v1\n    kind: ConfigMap\n    metadata:\n      name: my-files\n      namespace: sops-secrets-operator\n    data:\n      file.txt: |\n        some data here.\n''\n]\n</code></pre> <p>Declared by:</p> <ul> <li>&lt;n1x/modules/services/sops-secrets-operator.nix&gt;</li> </ul>"},{"location":"options/#servicessops-secrets-operatorname","title":"services.sops-secrets-operator.name","text":"<p>Name of the application for sops-secrets-operator.</p> <p>Type: string</p> <p>Default: <code>\"sops-secrets-operator\"</code></p> <p>Declared by:</p> <ul> <li>&lt;n1x/modules/services/sops-secrets-operator.nix&gt;</li> </ul>"},{"location":"options/#servicessops-secrets-operatornamespace","title":"services.sops-secrets-operator.namespace","text":"<p>Destination namespace for sops-secrets-operator.</p> <p>Type: string</p> <p>Default: <code>\"sops-secrets-operator\"</code></p> <p>Declared by:</p> <ul> <li>&lt;n1x/modules/services/sops-secrets-operator.nix&gt;</li> </ul>"},{"location":"options/#servicessops-secrets-operatorvalues","title":"services.sops-secrets-operator.values","text":"<p>Values to pass on to the sops-secrets-operator helm chart.</p> <p>Type: attribute set of anything</p> <p>Default: <code>{ }</code></p> <p>Declared by:</p> <ul> <li>&lt;n1x/modules/services/sops-secrets-operator.nix&gt;</li> </ul>"},{"location":"options/#servicestailscale-operatorenable","title":"services.tailscale-operator.enable","text":"<p>Whether to enable tailscale-operator.</p> <p>Type: boolean</p> <p>Default: <code>false</code></p> <p>Example: <code>true</code></p> <p>Declared by:</p> <ul> <li>&lt;n1x/modules/services/tailscale-operator.nix&gt;</li> </ul>"},{"location":"options/#servicestailscale-operatorextrayamls","title":"services.tailscale-operator.extraYAMLs","text":"<p>Extra resources defined in YAML that will be parsed and merged with the rest of the resources.</p> <p>Type: list of strings concatenated with \"\\n\"</p> <p>Default: <code>[ ]</code></p> <p>Example:</p> <pre><code>[\n  ''\n    apiVersion: v1\n    kind: Namespace\n    metadata:\n      name: tailscale-operator\n''\n''\n    apiVersion: v1\n    kind: ConfigMap\n    metadata:\n      name: my-config\n      namespace: tailscale-operator\n    ---\n    apiVersion: v1\n    kind: ConfigMap\n    metadata:\n      name: my-files\n      namespace: tailscale-operator\n    data:\n      file.txt: |\n        some data here.\n''\n]\n</code></pre> <p>Declared by:</p> <ul> <li>&lt;n1x/modules/services/tailscale-operator.nix&gt;</li> </ul>"},{"location":"options/#servicestailscale-operatorname","title":"services.tailscale-operator.name","text":"<p>Name of the application for tailscale-operator.</p> <p>Type: string</p> <p>Default: <code>\"tailscale-operator\"</code></p> <p>Declared by:</p> <ul> <li>&lt;n1x/modules/services/tailscale-operator.nix&gt;</li> </ul>"},{"location":"options/#servicestailscale-operatornamespace","title":"services.tailscale-operator.namespace","text":"<p>Destination namespace for tailscale-operator.</p> <p>Type: string</p> <p>Default: <code>\"tailscale-operator\"</code></p> <p>Declared by:</p> <ul> <li>&lt;n1x/modules/services/tailscale-operator.nix&gt;</li> </ul>"},{"location":"options/#servicestailscale-operatorvalues","title":"services.tailscale-operator.values","text":"<p>Values to pass on to the tailscale-operator helm chart.</p> <p>Type: attribute set of anything</p> <p>Default: <code>{ }</code></p> <p>Declared by:</p> <ul> <li>&lt;n1x/modules/services/tailscale-operator.nix&gt;</li> </ul>"},{"location":"options/#servicestraefikenable","title":"services.traefik.enable","text":"<p>Whether to enable traefik.</p> <p>Type: boolean</p> <p>Default: <code>false</code></p> <p>Example: <code>true</code></p> <p>Declared by:</p> <ul> <li>&lt;n1x/modules/services/traefik.nix&gt;</li> </ul>"},{"location":"options/#servicestraefikextrayamls","title":"services.traefik.extraYAMLs","text":"<p>Extra resources defined in YAML that will be parsed and merged with the rest of the resources.</p> <p>Type: list of strings concatenated with \"\\n\"</p> <p>Default: <code>[ ]</code></p> <p>Example:</p> <pre><code>[\n  ''\n    apiVersion: v1\n    kind: Namespace\n    metadata:\n      name: traefik\n''\n''\n    apiVersion: v1\n    kind: ConfigMap\n    metadata:\n      name: my-config\n      namespace: traefik\n    ---\n    apiVersion: v1\n    kind: ConfigMap\n    metadata:\n      name: my-files\n      namespace: traefik\n    data:\n      file.txt: |\n        some data here.\n''\n]\n</code></pre> <p>Declared by:</p> <ul> <li>&lt;n1x/modules/services/traefik.nix&gt;</li> </ul>"},{"location":"options/#servicestraefikingressclassenable","title":"services.traefik.ingressClass.enable","text":"<p>Enable creating an ingress class resource for traefik.</p> <p>Type: boolean</p> <p>Default: <code>true</code></p> <p>Declared by:</p> <ul> <li>&lt;n1x/modules/services/traefik.nix&gt;</li> </ul>"},{"location":"options/#servicestraefikingressclassisdefaultclass","title":"services.traefik.ingressClass.isDefaultClass","text":"<p>Set traefik ingress class as the default one.</p> <p>Type: boolean</p> <p>Default: <code>true</code></p> <p>Declared by:</p> <ul> <li>&lt;n1x/modules/services/traefik.nix&gt;</li> </ul>"},{"location":"options/#servicestraefikingressclassname","title":"services.traefik.ingressClass.name","text":"<p>The name of the ingress class for traefik.</p> <p>Type: string</p> <p>Default: <code>\"traefik\"</code></p> <p>Declared by:</p> <ul> <li>&lt;n1x/modules/services/traefik.nix&gt;</li> </ul>"},{"location":"options/#servicestraefikname","title":"services.traefik.name","text":"<p>Name of the application for traefik.</p> <p>Type: string</p> <p>Default: <code>\"traefik\"</code></p> <p>Declared by:</p> <ul> <li>&lt;n1x/modules/services/traefik.nix&gt;</li> </ul>"},{"location":"options/#servicestraefiknamespace","title":"services.traefik.namespace","text":"<p>Destination namespace for traefik.</p> <p>Type: string</p> <p>Default: <code>\"traefik\"</code></p> <p>Declared by:</p> <ul> <li>&lt;n1x/modules/services/traefik.nix&gt;</li> </ul>"},{"location":"options/#servicestraefikvalues","title":"services.traefik.values","text":"<p>Values to pass on to the traefik helm chart.</p> <p>Type: attribute set of anything</p> <p>Default: <code>{ }</code></p> <p>Declared by:</p> <ul> <li>&lt;n1x/modules/services/traefik.nix&gt;</li> </ul>"},{"location":"options/#storagecsinfsdrivername","title":"storage.csi.nfs.driverName","text":"<p>Name of the driver when deployed in the Kubernetes cluster.</p> <p>Type: string</p> <p>Default: <code>\"nfs.csi.k8s.io\"</code></p> <p>Declared by:</p> <ul> <li>&lt;n1x/modules/storage/nfs.nix&gt;</li> </ul>"},{"location":"options/#storagecsinfsenable","title":"storage.csi.nfs.enable","text":"<p>Whether to enable csi-driver-nfs.</p> <p>Type: boolean</p> <p>Default: <code>false</code></p> <p>Example: <code>true</code></p> <p>Declared by:</p> <ul> <li>&lt;n1x/modules/storage/nfs.nix&gt;</li> </ul>"},{"location":"options/#storagecsinfsextrayamls","title":"storage.csi.nfs.extraYAMLs","text":"<p>Extra resources defined in YAML that will be parsed and merged with the rest of the resources.</p> <p>Type: list of strings concatenated with \"\\n\"</p> <p>Default: <code>[ ]</code></p> <p>Example:</p> <pre><code>[\n  ''\n    apiVersion: v1\n    kind: Namespace\n    metadata:\n      name: kube-system\n''\n''\n    apiVersion: v1\n    kind: ConfigMap\n    metadata:\n      name: my-config\n      namespace: kube-system\n    ---\n    apiVersion: v1\n    kind: ConfigMap\n    metadata:\n      name: my-files\n      namespace: kube-system\n    data:\n      file.txt: |\n        some data here.\n''\n]\n</code></pre> <p>Declared by:</p> <ul> <li>&lt;n1x/modules/storage/nfs.nix&gt;</li> </ul>"},{"location":"options/#storagecsinfsname","title":"storage.csi.nfs.name","text":"<p>Name of the application for csi-driver-nfs.</p> <p>Type: string</p> <p>Default: <code>\"csi-driver-nfs\"</code></p> <p>Declared by:</p> <ul> <li>&lt;n1x/modules/storage/nfs.nix&gt;</li> </ul>"},{"location":"options/#storagecsinfsnamespace","title":"storage.csi.nfs.namespace","text":"<p>Destination namespace for csi-driver-nfs.</p> <p>Type: string</p> <p>Default: <code>\"kube-system\"</code></p> <p>Declared by:</p> <ul> <li>&lt;n1x/modules/storage/nfs.nix&gt;</li> </ul>"},{"location":"options/#storagecsinfsstorageclassenable","title":"storage.csi.nfs.storageClass.enable","text":"<p>Automatically create a StorageClass for csi-driver-nfs.</p> <p>Type: boolean</p> <p>Default: <code>false</code></p> <p>Declared by:</p> <ul> <li>&lt;n1x/modules/storage/nfs.nix&gt;</li> </ul>"},{"location":"options/#storagecsinfsstorageclassmountoptions","title":"storage.csi.nfs.storageClass.mountOptions","text":"<p>Extra options to pass on when mounting the NFS share.</p> <p>Type: list of string</p> <p>Default: <code>[ ]</code></p> <p>Example:</p> <pre><code>[\n  \"nfsvers=4.1\"\n]\n</code></pre> <p>Declared by:</p> <ul> <li>&lt;n1x/modules/storage/nfs.nix&gt;</li> </ul>"},{"location":"options/#storagecsinfsstorageclassname","title":"storage.csi.nfs.storageClass.name","text":"<p>Name of the StorageClass to create for csi-driver-nfs.</p> <p>Type: string</p> <p>Default: <code>\"nfs-csi\"</code></p> <p>Declared by:</p> <ul> <li>&lt;n1x/modules/storage/nfs.nix&gt;</li> </ul>"},{"location":"options/#storagecsinfsstorageclassreclaimpolicy","title":"storage.csi.nfs.storageClass.reclaimPolicy","text":"<p>Reclaim policy to use for the StorageClass for csi-driver-nfs.</p> <p>Type: one of \"Delete\", \"Retain\"</p> <p>Default: <code>\"Delete\"</code></p> <p>Declared by:</p> <ul> <li>&lt;n1x/modules/storage/nfs.nix&gt;</li> </ul>"},{"location":"options/#storagecsinfsstorageclassserver","title":"storage.csi.nfs.storageClass.server","text":"<p>NFS server address to use to connect to.</p> <p>Type: string</p> <p>Declared by:</p> <ul> <li>&lt;n1x/modules/storage/nfs.nix&gt;</li> </ul>"},{"location":"options/#storagecsinfsstorageclassshare","title":"storage.csi.nfs.storageClass.share","text":"<p>NFS share on the server to use for csi-driver-nfs.</p> <p>Type: string</p> <p>Declared by:</p> <ul> <li>&lt;n1x/modules/storage/nfs.nix&gt;</li> </ul>"},{"location":"options/#storagecsinfsstorageclassvolumebindingmode","title":"storage.csi.nfs.storageClass.volumeBindingMode","text":"<p>VolumeBindingMode indicates how PersistentVolumeClaims should be provisioned and bound.</p> <p>Type: one of \"Immediate\", \"WaitForFirstConsumer\"</p> <p>Default: <code>\"Immediate\"</code></p> <p>Declared by:</p> <ul> <li>&lt;n1x/modules/storage/nfs.nix&gt;</li> </ul>"},{"location":"options/#storagecsinfsvalues","title":"storage.csi.nfs.values","text":"<p>Values to pass on to the csi-driver-nfs chart.</p> <p>Type: attribute set of anything</p> <p>Default: <code>{ }</code></p> <p>Declared by:</p> <ul> <li>&lt;n1x/modules/storage/nfs.nix&gt;</li> </ul>"},{"location":"user_guide/app_of_apps/","title":"App of Apps","text":"<p>There is a pattern in Argo CD for declaratively bootstrapping the entire cluster from a single application. This pattern is called App of Apps.</p> <p>As with n1x all applications are declared within a single (modular) configuration, it's aware of all applications that are enabled. Therefore it can automatically generate an application with all other enabled applications (i.e. App of Apps).</p>"},{"location":"user_guide/app_of_apps/#enabling-app-of-apps","title":"Enabling App of Apps","text":"<p>The App of Apps application is not enabled by default but can easily be enabled with the following configuration option.</p> configuration.nix<pre><code>{...}: {\n  n1x.appOfApps.enable = true;\n\n  # ...\n}\n</code></pre> <p>And now when listing available applications the <code>apps</code> application has been added to the list. The name of the application can be changed with <code>n1x.appOfApps.name</code>.</p> <pre><code>&gt;&gt; nix run github:arnarg/n1x# -- list .#\napps - Argo CD app-of-apps with all applications that have inAppOfApps enabled.\nargocd - Argo CD is a declarative, GitOps continuous delivery tool for Kubernetes.\ncilium - eBPF-based Networking, Security, and Observability.\ncsi-driver-nfs - CSI Kubernetes storage driver to use NFS server for persistent volumes.\n</code></pre> <p>And rendering this application will output Argo CD <code>Application</code>s for all of the listed applications.</p> <pre><code>&gt;&gt; nix run github:arnarg/n1x# -- render .#apps\napiVersion: argoproj.io/v1alpha1                                               \nkind: Application                                                              \nmetadata:                                                                      name: argocd                                                                 namespace: argocd                                                            \nspec:                                                                          destination:                                                                 namespace: argocd                                                          server: https://kubernetes.default.svc                                     plugin:                                                                      parameters:                                                                - name: application                                                      string: argocd                                                         project: default                                                             source:                                                                      repoURL: git@github.com:arnarg/n1x.git                                     targetRevision: HEAD                                                       \n---                                                                            \napiVersion: argoproj.io/v1alpha1                                               \nkind: Application                                                              \nmetadata:                                                                      name: cilium                                                                 namespace: argocd                                                            \nspec:                                                                          destination:                                                                 namespace: kube-system                                                     server: https://kubernetes.default.svc                                     plugin:                                                                      parameters:                                                                - name: application                                                      string: cilium                                                         project: default                                                             source:                                                                      repoURL: git@github.com:arnarg/n1x.git                                     targetRevision: HEAD\n---\napiVersion: argoproj.io/v1alpha1\nkind: Application\nmetadata:\n  name: csi-driver-nfs\n  namespace: argocd\nspec:\n  destination:\n    namespace: kube-system\n    server: https://kubernetes.default.svc\n  plugin:\n    parameters:\n      - name: application\n        string: csi-driver-nfs\n  project: default\n  source:\n    repoURL: git@github.com:arnarg/n1x.git\n    targetRevision: HEAD\n</code></pre>"},{"location":"user_guide/getting_started/","title":"Getting Started","text":"<p>The use of n1x requires nix flakes.</p>"},{"location":"user_guide/getting_started/#initialize-repository","title":"Initialize Repository","text":"<p>First you will need to create a <code>flake.nix</code> in the root of the cluster repository.</p> flake.nix<pre><code>{\n  description = \"My ArgoCD configuration with n1x.\";\n\n  inputs.nixpkgs.url = \"github:nixos/nixpkgs/nixos-unstable\";\n  inputs.flake-utils.url = \"github:numtide/flake-utils\";\n  inputs.n1x.url = \"github:arnarg/n1x\";\n\n  outputs = {\n    self,\n    nixpkgs,\n    flake-utils,\n    n1x,\n  }: (flake-utils.lib.eachDefaultSystem (system: let\n    pkgs = import nixpkgs {\n      inherit system;\n    };\n  in {\n    n1xApplications = n1x.lib.n1xConfiguration {\n      inherit pkgs;\n      modules = [\n        ./configuration.nix\n      ];\n    };\n  }));\n}\n</code></pre> <p>And a <code>configuration.nix</code>.</p> configuration.nix<pre><code>{...}: {\n  # Enable Cilium as CNI\n  networking.cni = \"cilium\";\n\n  # This example is for a k3s cluster where the default\n  # pod CIDR is 10.42.0.0/16\n  networking.cilium.podCidrs = [\"10.42.0.0/16\"];\n\n  # We want to enable ArgoCD\n  services.argocd.enable = true;\n\n  # We want to enable the NFS CSI driver\n  storage.csi.nfs = {\n    enable = true;\n\n    # We want to automatically create a storage class\n    storageClass = {\n      enable = true;\n\n      # We have an NFS server available at `nfs.local`\n      # with share `/exports/kubernetes`\n      server = \"nfs.local\";\n      share = \"/exports/kubernetes\";\n\n      # Set custom mount options\n      mountOptions = [\n        \"nfsvers=4.1\"\n      ];\n    };\n  };\n}\n</code></pre>"},{"location":"user_guide/getting_started/#list-available-applications","title":"List available applications","text":"<p>After you have enabled some services in the example config above you can run the following command in the root of the repository to list applications that are enabled and deployable.</p> <pre><code>&gt;&gt; nix run github:arnarg/n1x# -- list\nargocd - Argo CD is a declarative, GitOps continuous delivery tool for Kubernetes.\ncilium - eBPF-based Networking, Security, and Observability.\ncsi-driver-nfs - CSI Kubernetes storage driver to use NFS server for persistent volumes.\n</code></pre>"},{"location":"user_guide/getting_started/#render-a-single-application","title":"Render a single application","text":"<p>From the list above we can discover applications that can be rendered with n1x.</p> <pre><code>&gt;&gt; nix run github:arnarg/n1x# -- render .#argocd\napiVersion: v1\nkind: Namespace\nmetadata:\n  name: argocd\n---\n# More resources ...\n</code></pre>"}]}